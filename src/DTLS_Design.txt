Upadte Nodes Pseudo Code Algorithm for DTLS:

    for all nodes:
        for all incoming roads:
            find nearest car in evrey node
            find min priorty in cars
            elimnate all cars from priorty array that dosn't equal the min priorty in the priorty array
            if priorty array len > 1:
                if exsist conflict: (if cars have joined vertex that is part of the node)
                    settle the conflict:
                    the winner is the one with the min number of edges from the joined conflicted vertex
                else:
                    continue (do nothing)
            else: (no cars in the node or there is a winning priorty one)
                go by priorty

Upadte Veichle Path Code Algorithm for DTLS:
option_1(graph G = (V, E),x)
1. A = smartSwapCanadeites(x), A is a sub group of E of size x <= |E|
2. foreach h,index i in getPossibleGraphs(A): , h is one of the 2^(|A|) possible ways to direct the graph. i is the index of graph h.
3.        sum = [2^|A|] 
4.        foreach v in Veichles
5.              sum[i] += dijikstra(graph h, v) 
6. return A[indexOfMin(sum)]

option_2(graph G = (V,E))
1.while(true):
2.  generateNewVehicles() # And update all edges weights with respect to a factor that is a function of the distance from the edge.
3.  if(t % T == 0): # t - current time, T - frequency of edges flip.
4.      resetAllEdgesWeights() # this open the option to go to busy roads at start??
5.      flipUnusedEdges() # An unused edge is a edge that dosn't Appear in the first X edges of any of the current paths. X will be selected by trail and error.
6.  dijikstraAllVehicles() # calculate the shortest path for each veichle. Make sure to update edges weights with respect to a factor that is a function of the distance from the edge.



report metrics:
# number of finished cars / time - Done
# Avg time to finish path  - Done
# Avg wating time
# Avg wating per node / road 
# Avg speed
# Avg Number of alt paths
# Avg len of phats




